package org.ttt.commons;

import static software.amazon.awssdk.enhanced.dynamodb.internal.AttributeValues.numberValue;

import java.util.Optional;
import java.util.UUID;
import software.amazon.awssdk.enhanced.dynamodb.*;
import software.amazon.awssdk.enhanced.dynamodb.extensions.AtomicCounterExtension;
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedTimestampRecordExtension;
import software.amazon.awssdk.enhanced.dynamodb.model.TransactUpdateItemEnhancedRequest;
import software.amazon.awssdk.enhanced.dynamodb.model.TransactWriteItemsEnhancedRequest;
import software.amazon.awssdk.services.dynamodb.DynamoDbClient;

public class GamesService {
  private final DynamoDbTable<Game> gamesTable;
  private final DynamoDbTable<GameCount> gamesCountTable;
  private final DynamoDbEnhancedClient enhancedClient;
  private final int maxGamesCount;

  public GamesService(ParametersProvider parametersProvider, DynamoDbClient dynamoDbClient) {
    DynamoDbEnhancedClient client =
        DynamoDbEnhancedClient.builder()
            .dynamoDbClient(dynamoDbClient)
            .extensions(
                AutoGeneratedTimestampRecordExtension.create(),
                AtomicCounterExtension.builder().build())
            .build();
    this.enhancedClient = client;
    String gamesTableName = parametersProvider.getParameter("GAMES_TABLE_NAME");
    this.gamesTable = client.table(gamesTableName, TableSchema.fromClass(Game.class));
    String gamesCountTableName = parametersProvider.getParameter("GAMES_COUNT_TABLE_NAME");
    maxGamesCount = Integer.parseInt(parametersProvider.getParameter("MAX_GAMES_COUNT"));
    this.gamesCountTable =
        client.table(gamesCountTableName, TableSchema.fromClass(GameCount.class));
  }

  public GamesService() {
    this(new EnvVarParametersProvider(), DynamoDbClient.create());
  }

  public Optional<Game> getGame(String gameId) {
    return Optional.ofNullable(gamesTable.getItem(Game.builder().gameId(gameId).build()));
  }

  public Game createNewGame(CreateGameRequest request) {
    UUID uuid = UUID.randomUUID();
    Game game =
        Game.builder()
            .state(GameState.ACTIVE)
            .gameId(uuid.toString())
            .playerId(request.hostPlayerId())
            .opponentId(request.opponentId())
            .build();
    GameCount gameCount = GameCount.builder().playerId(request.hostPlayerId()).build();
    enhancedClient.transactWriteItems(
        TransactWriteItemsEnhancedRequest.builder()
            .addPutItem(gamesTable, game)
            .addUpdateItem(
                gamesCountTable,
                TransactUpdateItemEnhancedRequest.builder(GameCount.class)
                    .item(gameCount)
                    .conditionExpression(
                        Expression.builder()
                            // This checks existing value before atomic increment, then performs the
                            // update
                            .expression("attribute_not_exists(activeGames) OR activeGames < :limit")
                            .putExpressionValue(":limit", numberValue(maxGamesCount))
                            .build())
                    .build())
            .build());
    return gamesTable.getItem(Key.builder().partitionValue(uuid.toString()).build());
  }
}
