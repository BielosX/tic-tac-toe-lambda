#file: noinspection MaybeTerraformTemplateInspection
openapi: "3.0.3"
info:
  version: "1.0.0"
  title: "Tic Tac Toe"
paths:
  /games/{gameId}:
    get:
      operationId: describeGame
      description: "Get name by ID"
      security:
        - authorizer: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: "${describe_game_arn}"
        payloadFormatVersion: "2.0"
        passthroughBehavior: when_no_templates
      responses:
        200:
          description: "Game exists"
        404:
          description: "Game with ID not found"
      parameters:
        - name: gameId
          description: "Get game by Id"
          in: path
          required: true
          schema:
            type: string
  /games:
    get:
      operationId: listGames
      description: "Get games for player"
      parameters:
        - name: asOpponent
          description: "Query all games by opponentId"
          in: query
          schema:
            type: boolean
            default: false
        - name: nextPageToken
          description: "Last evaluated key for pagination"
          in: query
          schema:
            type: string
        - name: limit
          description: "Page size limit"
          in: query
          schema:
            type: number
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: "${list_games_arn}"
        payloadFormatVersion: "2.0"
        passthroughBehavior: when_no_templates
      responses:
        200:
          description: "List of games returned"
      security:
        - authorizer: []
    post:
      security:
        - authorizer: []
      operationId: startGame
      description: "Start new game"
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: "${start_game_arn}"
        payloadFormatVersion: "2.0"
        passthroughBehavior: when_no_templates
      responses:
        200:
          description: "New game successfully started"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/StartGame'
  /games/{gameId}/moves:
    parameters:
      - name: gameId
        description: "Game Identifier"
        in: path
        required: true
        schema:
          type: string
    post:
      security:
        - authorizer: []
      operationId: playerMove
      description: "Adds new player move"
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: "${player_move_arn}"
        payloadFormatVersion: "2.0"
        passthroughBehavior: when_no_templates
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PlayerMove'
      responses:
        200:
          description: "Move properly commited"
components:
  securitySchemes:
    authorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authorizer:
        type: jwt
        identitySource : "$request.header.Authorization"
        authorizerPayloadFormatVersion: "2.0"
        jwtConfiguration:
          audience:
            - "${audience}"
          issuer: "${issuer}"
  schemas:
    StartGame:
      type: object
      required:
        - opponentId
      properties:
        opponentId:
          type: string
    PlayerMove:
      type: object
      required:
        - round
        - positionX
        - positionY
        - symbol
      properties:
        round:
          type: number
        positionX:
          type: number
        positionY:
          type: number
        symbol:
          type: string
          enum:
            - CROSS
            - NOUGHT
